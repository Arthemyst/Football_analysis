name: Run Django Tests

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        # usunąłem ports: - 5432:5432, żeby uniknąć konfliktów z hostem runnera

      redis:
        image: redis:7-alpine
        # usunąłem ports tutaj też — dostęp po hostname 'redis' będzie działać
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install PostgreSQL client (pg_isready)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres to be ready (with logs on failure)
        # PGPASSWORD potrzebne do sprawdzenia stanu serwera gdy jest auth
        env:
          PGPASSWORD: test_pass
        run: |
          echo "Checking Postgres readiness on host 'postgres'..."
          retries=60
          count=0
          until pg_isready -h postgres -p 5432 -U test_user -d test_db; do
            count=$((count+1))
            echo "[$count/$retries] postgres:5432 - not ready yet..."
            if [ $count -ge $retries ]; then
              echo "Postgres didn't become ready in time. Dumping containers and logs for debugging:"
              docker ps -a --format 'table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}'
              # spróbuj znaleźć kontener postgresa po obrazie
              PG_CONTAINER=$(docker ps -q --filter ancestor=postgres:14 || true)
              if [ -z "$PG_CONTAINER" ]; then
                PG_CONTAINER=$(docker ps -q --filter ancestor=postgres:14.2-alpine || true)
              fi
              if [ -n "$PG_CONTAINER" ]; then
                echo "=== Postgres container logs ==="
                docker logs "$PG_CONTAINER" || true
              else
                echo "No Postgres container found (ancestor filter)."
              fi
              exit 1
            fi
            sleep 2
          done
          echo "Postgres is ready."

      - name: Make migrations
        working-directory: src
        env:
          DJANGO_SETTINGS_MODULE: conf.test_settings
          SECRET_KEY: test_secret
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          DB_HOST: postgres
          DB_PORT: 5432
          ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py makemigrations --noinput

      - name: Run tests with pytest
        working-directory: src
        env:
          DJANGO_SETTINGS_MODULE: conf.test_settings
          REDIS_URL: redis://redis:6379/0
          SECRET_KEY: test_secret
          ALLOWED_HOSTS: localhost,127.0.0.1
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          DB_HOST: postgres
          DB_PORT: 5432
        run: |
          pytest -v --ds=conf.test_settings --migrations
